#+Title: Emacs Configuration
#+AUTHOR: Zeno
#+STARTUP: shownone
#+PROPERTY: header-args:emacs-lisp :tangle /home/adrian/.emacs.d/init.el

* Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Adrian Eichelbaum"
      user-mail-address "ad.eichelbaum@gmail.com")
#+end_src

* UI Customization
Sets a custom scratch-buffer message and disables some UI elements to make emacs more minimal in appearance

#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message ";; Welcome back, Zeno")

(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room
(menu-bar-mode -1)          ; Disable the menu bar
(setq-default truncate-lines t)
#+END_SRC

Set the cursor to a bar

#+BEGIN_SRC emacs-lisp
(setq-default cursor-type 'bar)
#+END_SRC

** Line Numbers

Show line numbers, highlight current line

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode)                ; Highlight current line
(global-display-line-numbers-mode t) ; Show line numbers
#+END_SRC

  Hife line numbers in certain modes. To add a mode, add the corrosponding mode-hook to the =shell-mode-hook=-list

#+BEGIN_SRC emacs-lisp
(dolist (mode '(shell-mode-hook))
(add-hook mode (lambda() (display-line-numbers-mode 0))))
#+END_SRC

** Set font and theme

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "Terminus 14")
(load-theme 'doom-horizon t)
#+END_SRC

* Folder Setup

Adds the custom folder to the load-path. This is where custom emacs addons are stored, if not installed with the package manager.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/custom")
#+END_SRC

Changes, so that custom config snippets generated by emacs get saved in the custom.el file, so they dont clutter up the config file.

#+BEGIN_SRC emacs-lisp
;; write custom configs to seperate file
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+END_SRC

Changes the location where backupfiles and autosave files are stored, so they dont clutter up the working directory.

#+BEGIN_SRC emacs-lisp
;; Keep all backup and auto-save files in one directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

* QOL Changes
** Delete the selected region, when typing over it, like on expects

#+BEGIN_SRC emacs-lisp
(delete-selection-mode t)
#+END_SRC

** Set the escape key to quit prompts

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC

** Close on buffer-kill also the window

#+BEGIN_SRC emacs-lisp
(substitute-key-definition 'kill-buffer 'kill-buffer-and-window global-map)
#+END_SRC

** Split buffers vertically

#+BEGIN_SRC emacs-lisp
(setq split-height-threshold nil)
(setq split-width-threshold 0)
#+END_SRC

* Publishing to Jekyll with org-mode
I publish my blog using Jekyll and I want to be able to publish using EMACS's org-mode

#+begin_src emacs-lisp
(setq org-publish-project-alist
      '(("zenopage" ;; my blog project (just a name)
         ;; Path to org files.
         :base-directory "~/code/zenopage/_drafts/"
         :base-extension "org"
         ;; Path to Jekyll Posts
         :publishing-directory "~/code/zenopage/_posts/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4
         :html-extension "html"
         :body-only t
         )))
#+end_src
* Custom Code Snippets
** Create new buffer in a new frame
creates a function, which creates a new bufer in a new frame and assign it to =C-c n=
#+begin_src emacs-lisp
(defun new-buffer-new-window ()
  "Creates a new buffer in a new window"
  (interactive)
  (let ((buffer (generate-new-buffer "Untitled")))
    (set-buffer-major-mode buffer)
    (display-buffer buffer '(display-buffer-pop-up-window . nil))))

(global-set-key (kbd "C-c n") #'new-buffer-new-window)
#+end_src
* Rust Environment
** Rust Major Mode
#+begin_src emacs-lisp
(use-package rust-mode
)
#+end_src

** Spaces rather than tabs to indent
Rust uses spaces to indent, rather than tabs, so we disable the use of tabs for indentation

#+begin_src emacs-lisp
(add-hook 'rust-mode-hook
    (lambda () (setq indent-tabs-mode nil)))
#+end_src

** Code formatting on save
The =rust-format-buffer= function will format your code with =rustfmt= if installed. By default, this is bound to =C-c C-f=.
The variable =rust-format-on-save= enables automatic formatting on save.

#+begin_src emacs-lisp
(setq rust-format-on-save t)
#+end_src

** Running / testing / compiling code
The =rust-run=, =rust-test=, =rust-compile= and =rust-check= functions shell out to Cargo to run, test, build and check your code. Under the hood, these use the standard Emacs compile function.

These are not bound by default. To bind these to keyboard shortcuts, you can use the following in your init.el:

#+begin_src emacs-lisp
(define-key rust-mode-map (kbd "C-c C-c") 'rust-run)
#+end_src

* Packages
** Package setup
Prepare the repos and other stuff

#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))
#+end_src

** Use-package
A more easy and usefull way of managing packages, everyhting which belongs together is in one place and can be installed automatically

#+begin_src emacs-lisp
(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

The =use-package-always-ensure t= enables auto install

** Custom splash-screen

#+begin_src emacs-lisp
(require 'splash-screen)
#+end_src

** Change theme based on time

Set your location, to get sunrise and sunset

#+begin_src emacs-lisp
(setq calendar-location-name "Leizpig, DE") 
(setq calendar-latitude 51.33)
(setq calendar-longitude 12.37)
#+end_src

Load the package and set the theme based on time. The first argument is day, the second the theme night.

#+begin_src emacs-lisp
(require 'theme-changer)
(change-theme 'doom-horizon 'doom-horizon)
#+end_src

** Move buffers around

Install package through use-package and define keybindings in the =:bind=-section

#+begin_src emacs-lisp
(use-package buffer-move
  :bind (
    ("<C-S-up>" . buf-move-up)
    ("<C-S-down>" . buf-move-down)
    ("<C-S-left>" . buf-move-left)
    ("<C-S-right>" . 'buf-move-right)
    )
  )
#+end_src

** Doom-themes

Install using use-package. In the =:config=-part you can define config options for the package.
Enables a custom neotree/teemacs theme and corrects the org-modes native fontification.
For this all-the-icons must be installed

#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (doom-themes-neotree-config)
  (setq doom-themes-treemacs-theme "doom-colors")
  (doom-themes-treemacs-config)
  (doom-themes-org-config))
#+end_src

** Doom-modeline

Change the modeline to the one of doom emacs, because I think it is more beautiful.

#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)
  (doom-modeline-minor-modes 1))
)
#+end_src

** Rainbow-delimiters

Changes paranthesis to dfferent colors, corosponding paranthesis have the same color.
It is enabled in every =prog-mode=, which means, it is activated in every mode, which is classified as a programming mode

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Markdown

Load the markdown-mode, when files with certain extensions are opened. To activate this mode on further files extensions, just add the fitting regex to the array.

#+begin_src emacs-lisp
(use-package markdown-mode
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src

** ORG-Mode
*** Initialize org-mode/Set org keybindings

Activate the package on certain file extensions. If configs are to be added, just add the =:config= section to the use-package section.

=org-store-link= is used to store a link to the current location and cna later be inserted into another org file using =org-link-insert=.
=org-agenda= opens a window, where one can specify a org-agenda command
=org-capture= will let you select a template and then file the newlu captured information. The text is immediately inserted at the target location.


#+begin_src emacs-lisp
(use-package org
  :mode (("\\.org$" . org-mode))
  :bind(
    ("C-c l" . 'org-store-link)
    ("C-c a" . 'org-agenda)
    ("C-c c" . 'org-capture)
    )
  )
#+end_src

*** Org-bullets

Change the headline bullet points to icons, is pretty

#+begin_src emacs-lisp
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

*** Ox-pandoc

Add pandoc export to org files.

#+begin_src emacs-lisp
(use-package ox-pandoc
  :defer 10)
#+end_src

*** word-count-mode
#+begin_src emacs-lisp
(use-package wc-mode)
(add-hook 'org-mode-hook (lambda () (wc-mode 1)))
(setq wc-modeline-format "[Words: %tw  Delta: %w Goal: %gw]")
#+end_src

*** On the fly spell checking

This enables on the fly spell checking with flyspell and hunspell. I set this up for org mode, because it is the most usefull there for me.
To change the language =M-x ispell-change-dictonary=

#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda () (flyspell-mode 1)))
#+end_src
** Ivy/Counsel

An completion framework for promps with fuzzyfinding and highlighting and more information.

#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind  (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  )
(ivy-mode 1)
#+end_src

Remap keys to use Ivy instead of the default

#+begin_src emacs-lisp
(use-package counsel
  :bind  (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))
#+end_src

Ivy-rich provides a more friendly interface for Ivy

#+begin_src emacs-lisp
(use-package ivy-rich
  :init
  (ivy-rich-mode 1))
#+end_src
** Olivetti
A nice writing environment for emacs

#+begin_src emacs-lisp
(use-package olivetti)
#+end_src
** Edwina
 Edwina is a dynamic window manager for Emacs. It automatically arranges your Emacs panes (called “windows” in Emacs parlance) into predefined layouts, dwm-style.

 #+begin_src emacs-lisp

 (add-to-list 'load-path
              (expand-file-name "~/.emacs.d/custom/edwina"))

 (use-package edwina
   :diminish
   :config
   (setq display-buffer-base-action '(display-buffer-below-selected))
   (edwina-setup-dwm-keys)
   (edwina-mode 1))
 #+end_src

** Helpful
Helpful is an alternative to the built-in Emacs help that provides much more contextual information.

#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Reload?")(load-file user-init-file))) nil t)
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t)
;; End:
** Elpher
A gemeni/gopher client

#+begin_src emacs-lisp
(use-package elpher
)
(add-hook 'elpher-mode-hook (lambda () (display-line-numbers-mode 0)))
#+end_src
